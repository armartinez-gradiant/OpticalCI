#!/usr/bin/env python3
"""
üîß Correcci√≥n de contexto de indentaci√≥n
El problema est√° en l√≠neas ANTES de la 193
"""

import os
import shutil
from datetime import datetime

def backup_file(filepath):
    """Crear backup seguro del archivo."""
    if os.path.exists(filepath):
        backup_path = f"{filepath}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(filepath, backup_path)
        print(f"‚úÖ Backup creado: {backup_path}")
        return backup_path
    return None

def analyze_context_thoroughly():
    """Analizar contexto completo alrededor de l√≠nea 193"""
    filepath = "examples/Example1.py"
    
    if not os.path.exists(filepath):
        print(f"‚ùå Archivo no encontrado: {filepath}")
        return False
    
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    problem_line = 193
    
    print(f"üîç AN√ÅLISIS COMPLETO - L√≠neas {problem_line-10} a {problem_line+5}:")
    print("=" * 80)
    
    for i in range(max(0, problem_line-11), min(len(lines), problem_line+6)):
        line = lines[i]
        line_content = line.rstrip('\n')
        
        # Detectar tabs vs espacios
        leading_whitespace = len(line) - len(line.lstrip())
        has_tabs = '\t' in line[:leading_whitespace]
        space_count = line[:leading_whitespace].count(' ')
        tab_count = line[:leading_whitespace].count('\t')
        
        # Marcar l√≠nea problem√°tica
        marker = " <<<< PROBLEMA" if i == problem_line - 1 else ""
        
        print(f"{i+1:3d}: {repr(line_content)}{marker}")
        print(f"     Espacios: {space_count}, Tabs: {tab_count}, Total: {leading_whitespace}")
        
        # Detectar problemas potenciales
        if has_tabs and space_count > 0:
            print(f"     ‚ö†Ô∏è MEZCLA DE TABS Y ESPACIOS")
        
        if line.rstrip().endswith(':') and i < len(lines) - 1:
            next_line = lines[i + 1]
            next_leading = len(next_line) - len(next_line.lstrip())
            if next_leading <= leading_whitespace:
                print(f"     ‚ö†Ô∏è SIGUIENTE L√çNEA NO TIENE M√ÅS INDENTACI√ìN")
        
        print()
    
    return lines

def fix_indentation_context():
    """Corregir problemas de indentaci√≥n en el contexto"""
    filepath = "examples/Example1.py"
    
    backup_file(filepath)
    
    lines = analyze_context_thoroughly()
    if not lines:
        return False
    
    problem_line = 193
    fixed = False
    
    # Buscar y corregir problemas espec√≠ficos
    for i in range(max(0, problem_line-10), min(len(lines), problem_line+5)):
        line = lines[i]
        
        # 1. Convertir tabs a espacios
        if '\t' in line:
            lines[i] = line.expandtabs(4)
            print(f"‚úÖ L√≠nea {i+1}: Tabs convertidos a espacios")
            fixed = True
        
        # 2. Buscar l√≠neas que deber√≠an tener : al final
        if i < len(lines) - 1:
            stripped = line.strip()
            next_line = lines[i + 1].strip()
            
            # Si l√≠nea actual es control flow sin : y siguiente est√° indentada
            if (stripped.startswith(('if ', 'elif ', 'else', 'for ', 'while ', 'try', 'except', 'finally', 'with ', 'def ', 'class ')) 
                and not stripped.endswith(':') 
                and next_line 
                and len(lines[i + 1]) - len(lines[i + 1].lstrip()) > len(line) - len(line.lstrip())):
                
                lines[i] = line.rstrip() + ':\n'
                print(f"‚úÖ L√≠nea {i+1}: Agregados dos puntos (:)")
                fixed = True
        
        # 3. Corregir indentaci√≥n incorrecta espec√≠fica
        if i == problem_line - 1:  # L√≠nea 193
            # Verificar l√≠nea anterior (192)
            if i > 0:
                prev_line = lines[i-1]
                curr_line = lines[i]
                
                # Si l√≠nea anterior termina en : y actual no tiene m√°s indentaci√≥n
                if prev_line.strip().endswith(':'):
                    prev_indent = len(prev_line) - len(prev_line.lstrip())
                    curr_indent = len(curr_line) - len(curr_line.lstrip())
                    
                    if curr_indent <= prev_indent:
                        # Agregar 4 espacios m√°s
                        lines[i] = ' ' * (prev_indent + 4) + curr_line.lstrip()
                        print(f"‚úÖ L√≠nea {i+1}: Indentaci√≥n incrementada despu√©s de :")
                        fixed = True
    
    if fixed:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        print("\n‚úÖ Correcciones aplicadas")
        return True
    
    return False

def manual_fix_around_193():
    """Correcci√≥n manual espec√≠fica alrededor de l√≠nea 193"""
    filepath = "examples/Example1.py"
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar el patr√≥n espec√≠fico problem√°tico
    # Es probable que sea el debug code que agregamos antes
    
    # Patr√≥n 1: Debug code mal indentado
    problematic_pattern = r'\n        # üîç DEBUG Simple: Par√°metros del microring\n        kappa_value = mrr\.coupling_tuning\.item\(\)\n        print\(f"   üîç Debug - Œ∫: \{kappa_value:.4f\}, Q: \{mrr\.q_factor\}"\)\n\n        print\(f"üìä Resultados Microring:"\)'
    
    if problematic_pattern in content:
        # Remover el debug problem√°tico completamente
        content = re.sub(problematic_pattern, '\n        print(f"üìä Resultados Microring:")', content)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Debug problem√°tico removido completamente")
        return True
    
    # Patr√≥n 2: Bloque de c√≥digo mal indentado
    lines = content.split('\n')
    for i, line in enumerate(lines):
        if 'Wavelength central:' in line and i == 192:  # L√≠nea 193 (√≠ndice 192)
            # Verificar l√≠neas anteriores
            for j in range(max(0, i-5), i):
                if lines[j].strip() and not lines[j].startswith('        '):
                    # Corregir indentaci√≥n de l√≠neas anteriores
                    lines[j] = '        ' + lines[j].lstrip()
                    print(f"‚úÖ L√≠nea {j+1}: Indentaci√≥n corregida")
            
            # Escribir archivo corregido
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write('\n'.join(lines))
            return True
    
    return False

def validate_syntax_after_fix():
    """Validar sintaxis despu√©s de correcci√≥n"""
    filepath = "examples/Example1.py"
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()
        
        compile(source, filepath, 'exec')
        print("‚úÖ SINTAXIS CORRECTA")
        return True
    
    except SyntaxError as e:
        print(f"‚ùå Error persiste en l√≠nea {e.lineno}: {e.msg}")
        if e.text:
            print(f"   Texto: {e.text.strip()}")
        return False

def main():
    """Funci√≥n principal de correcci√≥n de contexto"""
    print("üîß CORRECCI√ìN DE CONTEXTO DE INDENTACI√ìN")
    print("=" * 60)
    
    success = False
    
    # 1. An√°lisis detallado
    print("\nüîç PASO 1: An√°lisis detallado del contexto")
    analyze_context_thoroughly()
    
    # 2. Correcci√≥n de contexto
    print("\nüîß PASO 2: Correcci√≥n de contexto")
    if fix_indentation_context():
        success = True
    
    # 3. Correcci√≥n manual si es necesario
    if not success:
        print("\nüîß PASO 3: Correcci√≥n manual espec√≠fica")
        if manual_fix_around_193():
            success = True
    
    # 4. Validaci√≥n final
    print("\n‚úÖ PASO 4: Validaci√≥n final")
    syntax_ok = validate_syntax_after_fix()
    
    if syntax_ok:
        print("\nüéØ ¬°PROBLEMA RESUELTO!")
        print("   python examples/Example1.py")
    else:
        print("\n‚ùå PROBLEMA PERSISTE")
        print("   Usar backup m√°s reciente:")
        print("   ls examples/Example1.py.backup_*")

if __name__ == "__main__":
    main()