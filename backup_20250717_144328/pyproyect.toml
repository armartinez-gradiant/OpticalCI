[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ptonn-tests"
version = "0.1.0"
description = "A modern, updated PyTorch Library for Photonic Integrated Circuit Simulation and Photonic AI Computing"
readme = "README.md"
requires-python = ">=3.8,<3.13"
license = {text = "MIT"}
authors = [
    {name = "Gradiant Technology Center", email = "info@gradiant.org"},
]
maintainers = [
    {name = "Gradiant Technology Center", email = "info@gradiant.org"},
]
keywords = [
    "pytorch",
    "photonics", 
    "optical",
    "neural networks",
    "ONN",
    "simulation",
    "mach-zehnder",
    "photonic computing",
    "machine learning",
    "deep learning",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "torch>=2.0.0,<2.8.0",
    "torchvision>=0.15.0,<0.20.0",
    "torchaudio>=2.0.0,<2.8.0",
    "numpy>=1.19.0,<2.0.0",
    "scipy>=1.7.0,<1.13.0",
    "matplotlib>=3.3.0,<4.0.0",
    "pyyaml>=5.4.0,<7.0.0",
    "tqdm>=4.60.0,<5.0.0",
]

[project.urls]
Homepage = "https://github.com/armartinez-gradiant/PtONN-TESTS"
Repository = "https://github.com/armartinez-gradiant/PtONN-TESTS"
Documentation = "https://github.com/armartinez-gradiant/PtONN-TESTS/wiki"
"Bug Tracker" = "https://github.com/armartinez-gradiant/PtONN-TESTS/issues"
Changelog = "https://github.com/armartinez-gradiant/PtONN-TESTS/blob/main/CHANGELOG.md"
Funding = "https://www.gradiant.org/"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0,<8.0.0",
    "pytest-cov>=2.0.0,<5.0.0",
    "pytest-xdist>=2.0.0,<4.0.0",
    "black>=21.0.0,<25.0.0",
    "flake8>=3.8.0,<7.0.0",
    "mypy>=0.900,<2.0.0",
    "pre-commit>=2.15.0,<4.0.0",
]
performance = [
    "psutil>=5.8.0,<6.0.0",
]
visualization = [
    "seaborn>=0.11.0,<1.0.0",
    "plotly>=5.0.0,<6.0.0",
]
data = [
    "pandas>=1.3.0,<3.0.0",
    "h5py>=3.1.0,<4.0.0",
]
image = [
    "Pillow>=8.0.0,<11.0.0",
    "opencv-python>=4.5.0,<5.0.0",
]
ml = [
    "scikit-learn>=1.0.0,<2.0.0",
]
docs = [
    "sphinx>=4.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.0.0,<3.0.0",
]
notebook = [
    "jupyter>=1.0.0,<2.0.0",
    "notebook>=6.4.0,<8.0.0",
    "ipywidgets>=7.6.0,<9.0.0",
]
all = [
    "ptonn-tests[dev,performance,visualization,data,image,ml,docs,notebook]",
]

[project.scripts]
ptonn-test = "torchonn.utils.helpers:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["torchonn*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
torchonn = ["py.typed"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests", "unittest"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov=torchonn",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Code formatting with Black
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# Linting with flake8
[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "F", "W", "C90"]
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]

# Type checking with mypy
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "tqdm.*",
    "yaml.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["torchonn"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"