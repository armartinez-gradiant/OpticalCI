name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, update-python3.12 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -e .
        
    - name: Check code formatting with Black
      run: black --check --diff torchonn/ tests/
      
    - name: Lint with flake8
      run: |
        flake8 torchonn/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 torchonn/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type check with mypy
      run: mypy torchonn/
      continue-on-error: true

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pytorch-version: ["2.0.1", "2.1.0", "2.2.0"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
          - pytorch-version: "2.0.1"
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: ${{ runner.os }}-python${{ matrix.python-version }}-pytorch${{ matrix.pytorch-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python${{ matrix.python-version }}-pytorch${{ matrix.pytorch-version }}-
          ${{ runner.os }}-python${{ matrix.python-version }}-
          ${{ runner.os }}-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libomp
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        
        # Install NumPy first (compatibility fix)
        pip install "numpy>=1.19.0,<2.0.0"
        
        # Install PyTorch with specific version
        if [ "${{ matrix.pytorch-version }}" = "2.0.1" ]; then
          pip install torch==${{ matrix.pytorch-version }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        elif [ "${{ matrix.pytorch-version }}" = "2.1.0" ]; then
          pip install torch==${{ matrix.pytorch-version }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        else
          pip install torch==${{ matrix.pytorch-version }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        fi
        
        # Install other dependencies
        pip install scipy matplotlib pyyaml tqdm
        pip install pytest pytest-cov pytest-xdist
        
        # Install package in development mode
        pip install -e .
      shell: bash
        
    - name: Verify installation
      run: |
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "import torchonn; print(f'TorchONN version: {torchonn.__version__}')"
        python -c "from torchonn.layers import MZILayer, MZIBlockLinear; print('Layers imported successfully')"
        
    - name: Run installation test
      run: python test_installation.py
      
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --cov=torchonn --cov-report=xml --cov-report=term-missing
        
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short -m "not slow"
        
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-gpu:
    name: GPU Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install CUDA dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nvidia-cuda-toolkit
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "numpy>=1.19.0,<2.0.0"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install pytest pytest-cov
        pip install -e .
        
    - name: Run GPU tests
      run: |
        pytest tests/ -v -m "gpu" --tb=short
      continue-on-error: true

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "numpy>=1.19.0,<2.0.0"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install pytest pytest-benchmark
        pip install -e .
        
    - name: Run performance benchmarks
      run: |
        pytest tests/ -v -m "performance" --benchmark-only --benchmark-json=benchmark.json
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "numpy>=1.19.0,<2.0.0"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install sphinx sphinx-rtd-theme
        pip install -e .
        
    - name: Build documentation
      run: |
        # Create basic docs structure if it doesn't exist
        mkdir -p docs
        echo "# Documentation will be generated here" > docs/index.md
        
    - name: Check documentation build
      run: |
        python -c "import torchonn; help(torchonn)"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'bandit-report.sarif'
      continue-on-error: true
        
    - name: Run safety check
      run: |
        pip install safety
        safety check --json > safety-report.json || true
      continue-on-error: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, docs]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: ptonn-tests-dist
        asset_content_type: application/zip

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.lint.result == 'success'
      run: echo "✅ All tests passed successfully!"
      
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure'
      run: echo "❌ Some tests failed. Please check the logs."