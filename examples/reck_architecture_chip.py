#!/usr/bin/env python3
"""
Arquitectura de Reck - Chip Fot√≥nico Altamente Complejo

Implementaci√≥n de la arquitectura cl√°sica de Reck et al. (1994) para 
transformaciones unitarias universales usando redes de Mach-Zehnder.

Esta es la configuraci√≥n gold standard para computaci√≥n fot√≥nica de prop√≥sito general.
"""

import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
from typing import List, Tuple, Optional, Dict
import time
import math

from torchonn.layers import MZIBlockLinear, MZILayer
from torchonn.models import ONNBaseModel

class ReckMZI(nn.Module):
    """
    Interfer√≥metro Mach-Zehnder individual seg√∫n arquitectura de Reck.
    
    Cada MZI tiene dos par√°metros de fase: Œ∏ (splitting ratio) y œÜ (phase shift).
    """
    
    def __init__(self, device: Optional[torch.device] = None):
        super().__init__()
        
        if device is None:
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.device = device
        
        # Par√°metros de fase seg√∫n Reck
        # Œ∏ controla el splitting ratio, œÜ controla la fase relativa
        self.theta = nn.Parameter(torch.rand(1, device=device) * np.pi)  # 0 to œÄ
        self.phi = nn.Parameter(torch.rand(1, device=device) * 2 * np.pi)  # 0 to 2œÄ
        
        # Par√°metros f√≠sicos
        self.insertion_loss = 0.05  # dB
        self.phase_error = 0.01  # radianes
        
    def forward(self, input_pair: torch.Tensor) -> torch.Tensor:
        """
        Aplica transformaci√≥n MZI a un par de inputs.
        
        Args:
            input_pair: Tensor [batch_size, 2] - par de se√±ales √≥pticas
            
        Returns:
            output_pair: Tensor [batch_size, 2] - par transformado
        """
        # Extraer componentes del par
        a, b = input_pair[:, 0], input_pair[:, 1]
        
        # Matriz de transferencia MZI seg√∫n Reck
        cos_theta = torch.cos(self.theta)
        sin_theta = torch.sin(self.theta)
        exp_phi = torch.exp(1j * self.phi)
        
        # Transformaci√≥n unitaria 2x2
        # [out_a]   [cos(Œ∏)    sin(Œ∏)exp(iœÜ)] [a]
        # [out_b] = [-sin(Œ∏)   cos(Œ∏)exp(iœÜ)] [b]
        
        out_a = cos_theta * a + sin_theta * b * torch.cos(self.phi)
        out_b = -sin_theta * a + cos_theta * b * torch.cos(self.phi)
        
        # Aplicar p√©rdidas realistas
        loss_factor = 10 ** (-self.insertion_loss / 20)
        out_a = out_a * loss_factor
        out_b = out_b * loss_factor
        
        # A√±adir ruido de fase si est√° en entrenamiento
        if self.training:
            phase_noise = torch.randn_like(out_a) * self.phase_error
            out_a = out_a * (1 + phase_noise * 0.1)
            out_b = out_b * (1 + phase_noise * 0.1)
        
        return torch.stack([out_a, out_b], dim=1)

class ReckArchitecture(ONNBaseModel):
    """
    Arquitectura completa de Reck para transformaciones unitarias NxN.
    
    Implementa la configuraci√≥n triangular cl√°sica que puede realizar
    cualquier transformaci√≥n unitaria usando N(N-1)/2 MZIs.
    """
    
    def __init__(
        self,
        n_modes: int = 16,
        wavelengths: List[float] = None,
        temperature: float = 300.0,  # Kelvin
        fabrication_tolerance: float = 0.02,  # 2% variaci√≥n
        crosstalk_db: float = -40,
        device: Optional[torch.device] = None
    ):
        super().__init__(device=device)
        
        self.n_modes = n_modes
        self.temperature = temperature
        self.fabrication_tolerance = fabrication_tolerance
        self.crosstalk_db = crosstalk_db
        
        # Wavelengths para WDM (C-band por defecto)
        if wavelengths is None:
            wavelengths = [1530e-9 + i * 5e-9 for i in range(8)]  # 8 canales WDM
        self.wavelengths = torch.tensor(wavelengths, device=self.device)
        self.n_wavelengths = len(wavelengths)
        
        # Construir la red de Reck
        self._build_reck_network()
        
        # Efectos f√≠sicos avanzados
        self._init_physical_effects()
        
        print(f"üèóÔ∏è  Arquitectura de Reck construida:")
        print(f"   üìè Tama√±o: {n_modes}x{n_modes}")
        print(f"   üîß MZIs totales: {self.total_mzis}")
        print(f"   üåà Wavelengths: {self.n_wavelengths}")
        print(f"   üå°Ô∏è  Temperatura: {temperature}K")
    
    def _build_reck_network(self):
        """Construir la red triangular de Reck."""
        self.mzi_layers = nn.ModuleList()
        self.mzi_positions = []  # Para tracking de posiciones
        
        total_mzis = 0
        
        # La arquitectura de Reck tiene una estructura triangular espec√≠fica
        # Cada "layer" conecta pares de modos adyacentes
        for layer_idx in range(self.n_modes - 1):
            layer_mzis = nn.ModuleList()
            
            # En cada layer, conectamos modos (i, i+1) donde i es par o impar
            # alternando entre layers para crear la estructura triangular
            for mzi_idx in range(self.n_modes - 1 - layer_idx):
                mzi = ReckMZI(device=self.device)
                layer_mzis.append(mzi)
                
                # Guardar posici√≥n para visualizaci√≥n
                mode_a = mzi_idx + (layer_idx % 2)
                mode_b = mode_a + 1
                self.mzi_positions.append((layer_idx, mode_a, mode_b))
                
                total_mzis += 1
            
            self.mzi_layers.append(layer_mzis)
        
        self.total_mzis = total_mzis
        print(f"   üî¢ MZIs te√≥ricos (N(N-1)/2): {self.n_modes * (self.n_modes - 1) // 2}")
        print(f"   üî¢ MZIs implementados: {total_mzis}")
    
    def _init_physical_effects(self):
        """Inicializar efectos f√≠sicos avanzados."""
        # Variaciones de fabricaci√≥n por MZI
        self.fabrication_errors = nn.ParameterList()
        for layer in self.mzi_layers:
            layer_errors = nn.Parameter(
                torch.randn(len(layer), 2, device=self.device) * self.fabrication_tolerance
            )
            self.fabrication_errors.append(layer_errors)
        
        # Deriva t√©rmica (thermo-optic effect)
        self.thermal_coefficients = nn.Parameter(
            torch.randn(self.total_mzis, device=self.device) * 1e-4
        )
        
        # Crosstalk entre waveguides
        crosstalk_linear = 10 ** (self.crosstalk_db / 20)
        self.crosstalk_matrix = self._build_crosstalk_matrix(crosstalk_linear)
    
    def _build_crosstalk_matrix(self, crosstalk_strength: float):
        """Construir matriz de crosstalk entre waveguides."""
        matrix = torch.eye(self.n_modes, device=self.device)
        
        # Crosstalk entre waveguides adyacentes
        for i in range(self.n_modes - 1):
            matrix[i, i+1] = crosstalk_strength
            matrix[i+1, i] = crosstalk_strength
        
        # Crosstalk de segundo orden (m√°s d√©bil)
        for i in range(self.n_modes - 2):
            matrix[i, i+2] = crosstalk_strength * 0.1
            matrix[i+2, i] = crosstalk_strength * 0.1
        
        return matrix
    
    def apply_thermal_effects(self):
        """Aplicar deriva t√©rmica a los MZIs."""
        if self.training:  # Solo durante entrenamiento para simular deriva
            # Deriva t√©rmica: ŒîœÜ = Œ± * ŒîT
            temp_variation = (self.temperature - 300) / 300  # Normalizado
            
            mzi_idx = 0
            for layer_idx, layer in enumerate(self.mzi_layers):
                for mzi in layer:
                    thermal_shift = self.thermal_coefficients[mzi_idx] * temp_variation
                    mzi.phi.data += thermal_shift
                    mzi_idx += 1
    
    def apply_fabrication_errors(self):
        """Aplicar errores de fabricaci√≥n."""
        for layer_idx, (layer, errors) in enumerate(zip(self.mzi_layers, self.fabrication_errors)):
            for mzi_idx, mzi in enumerate(layer):
                if mzi_idx < errors.size(0):
                    # Aplicar errores a Œ∏ y œÜ
                    theta_error = errors[mzi_idx, 0] * 0.1
                    phi_error = errors[mzi_idx, 1] * 0.1
                    
                    mzi.theta.data = torch.clamp(mzi.theta.data + theta_error, 0, np.pi)
                    mzi.phi.data = (mzi.phi.data + phi_error) % (2 * np.pi)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Forward pass a trav√©s de la arquitectura de Reck.
        
        Args:
            x: Input tensor [batch_size, n_modes] o [batch_size, n_modes, n_wavelengths]
        """
        # Manejar m√∫ltiples wavelengths
        if x.dim() == 2:
            # Expandir a m√∫ltiples wavelengths
            x = x.unsqueeze(-1).expand(-1, -1, self.n_wavelengths)
        
        batch_size = x.size(0)
        
        # Aplicar efectos f√≠sicos
        self.apply_thermal_effects()
        
        # Procesar cada wavelength por separado
        wavelength_outputs = []
        
        for w_idx in range(self.n_wavelengths):
            w_input = x[:, :, w_idx]  # [batch_size, n_modes]
            
            # Aplicar crosstalk inicial
            w_input = torch.matmul(w_input, self.crosstalk_matrix)
            
            # Procesar a trav√©s de las capas de MZIs
            current_modes = w_input
            
            for layer_idx, layer in enumerate(self.mzi_layers):
                new_modes = current_modes.clone()
                
                # Aplicar MZIs en esta capa
                for mzi_idx, mzi in enumerate(layer):
                    # Determinar qu√© modos conecta este MZI
                    if layer_idx < len(self.mzi_positions):
                        start_pos = sum(len(prev_layer) for prev_layer in self.mzi_layers[:layer_idx])
                        global_mzi_idx = start_pos + mzi_idx
                        
                        if global_mzi_idx < len(self.mzi_positions):
                            _, mode_a, mode_b = self.mzi_positions[global_mzi_idx]
                            
                            if mode_a < current_modes.size(1) and mode_b < current_modes.size(1):
                                # Extraer par de modos
                                mode_pair = torch.stack([
                                    current_modes[:, mode_a],
                                    current_modes[:, mode_b]
                                ], dim=1)
                                
                                # Aplicar transformaci√≥n MZI
                                transformed_pair = mzi(mode_pair)
                                
                                # Actualizar modos
                                new_modes[:, mode_a] = transformed_pair[:, 0]
                                new_modes[:, mode_b] = transformed_pair[:, 1]
                
                current_modes = new_modes
            
            wavelength_outputs.append(current_modes)
        
        # Combinar outputs de diferentes wavelengths
        if self.n_wavelengths == 1:
            return wavelength_outputs[0]
        else:
            # Promedio ponderado o concatenaci√≥n
            return torch.stack(wavelength_outputs, dim=-1).mean(dim=-1)
    
    def get_transfer_matrix(self) -> torch.Tensor:
        """Calcular la matriz de transferencia completa del chip."""
        with torch.no_grad():
            identity_matrix = torch.eye(self.n_modes, device=self.device)
            transfer_matrix = torch.zeros(self.n_modes, self.n_modes, device=self.device)
            
            for i in range(self.n_modes):
                input_vector = identity_matrix[i:i+1]  # Un modo a la vez
                output_vector = self.forward(input_vector)
                transfer_matrix[i] = output_vector[0]
            
            return transfer_matrix
    
    def calculate_unitarity_error(self) -> float:
        """Calcular qu√© tan cerca est√° la matriz de ser unitaria."""
        transfer_matrix = self.get_transfer_matrix()
        
        # Para una matriz unitaria: U @ U‚Ä† = I
        product = torch.matmul(transfer_matrix, transfer_matrix.conj().T)
        identity = torch.eye(self.n_modes, device=self.device)
        
        error = torch.norm(product - identity).item()
        return error
    
    def get_chip_info(self) -> Dict:
        """Obtener informaci√≥n completa del chip."""
        return {
            'architecture': 'Reck',
            'n_modes': self.n_modes,
            'total_mzis': self.total_mzis,
            'theoretical_mzis': self.n_modes * (self.n_modes - 1) // 2,
            'n_wavelengths': self.n_wavelengths,
            'wavelength_range_nm': [
                float(self.wavelengths.min() * 1e9),
                float(self.wavelengths.max() * 1e9)
            ],
            'temperature_k': self.temperature,
            'crosstalk_db': self.crosstalk_db,
            'total_parameters': sum(p.numel() for p in self.parameters()),
            'unitarity_error': self.calculate_unitarity_error(),
        }

class PhotonicFFT(ReckArchitecture):
    """FFT √≥ptica usando arquitectura de Reck."""
    
    def __init__(self, n_points: int = 16, **kwargs):
        # n_points debe ser potencia de 2 para FFT
        n_points = 2 ** int(np.log2(n_points))
        super().__init__(n_modes=n_points, **kwargs)
        
        self.n_points = n_points
        print(f"üåä FFT √ìptica configurada para {n_points} puntos")
    
    def fft_forward(self, signal: torch.Tensor) -> torch.Tensor:
        """Realizar FFT √≥ptica."""
        # El forward pass de Reck implementa la transformaci√≥n
        # Para FFT real, necesitar√≠amos programar las fases espec√≠ficamente
        return self.forward(signal)
    
    def compare_with_torch_fft(self, signal: torch.Tensor):
        """Comparar con FFT de PyTorch."""
        optical_fft = self.fft_forward(signal)
        torch_fft = torch.fft.fft(signal.squeeze(-1) if signal.dim() == 3 else signal, dim=-1)
        
        # Solo comparar magnitudes (las fases pueden diferir)
        optical_mag = torch.abs(optical_fft)
        torch_mag = torch.abs(torch_fft)
        
        correlation = torch.corrcoef(torch.stack([
            optical_mag.flatten(),
            torch_mag.flatten()
        ]))[0, 1]
        
        return correlation.item()

class PhotonicMatrixMultiplier(ReckArchitecture):
    """Multiplicador de matrices √≥ptico."""
    
    def __init__(self, matrix_size: int = 8, **kwargs):
        super().__init__(n_modes=matrix_size, **kwargs)
        
        self.matrix_size = matrix_size
        print(f"üî¢ Multiplicador matricial {matrix_size}x{matrix_size}")
    
    def matrix_multiply(self, matrix_a: torch.Tensor, matrix_b: torch.Tensor) -> torch.Tensor:
        """
        Multiplicar matrices usando el chip √≥ptico.
        Simplificaci√≥n: usar el chip como transformaci√≥n lineal.
        """
        # Flatten matrices para procesamiento
        flat_a = matrix_a.view(-1, self.matrix_size)
        
        # Procesar a trav√©s del chip
        result = self.forward(flat_a)
        
        # Reshape de vuelta
        return result.view(matrix_a.size(0), self.matrix_size, -1)

def test_large_reck_chip():
    """Test de un chip de Reck grande y complejo."""
    print("üèóÔ∏è  Test: Chip de Reck Altamente Complejo")
    print("=" * 60)
    
    # Configuraci√≥n de chip grande
    chip_config = {
        'n_modes': 32,  # Chip 32x32 - muy grande!
        'wavelengths': [1525e-9 + i * 2.5e-9 for i in range(16)],  # 16 canales WDM
        'temperature': 295.0,  # Temperatura de laboratorio
        'fabrication_tolerance': 0.015,  # 1.5% - alta precisi√≥n
        'crosstalk_db': -45,  # Excelente aislamiento
    }
    
    print(f"üìä Configuraci√≥n del chip:")
    for key, value in chip_config.items():
        if isinstance(value, list):
            print(f"   {key}: {len(value)} elementos")
        else:
            print(f"   {key}: {value}")
    
    # Crear chip
    print(f"\nüöÄ Construyendo chip de Reck...")
    chip = ReckArchitecture(**chip_config)
    
    # Informaci√≥n del chip
    info = chip.get_chip_info()
    print(f"\nüìã Informaci√≥n del chip:")
    for key, value in info.items():
        print(f"   {key}: {value}")
    
    # Test de rendimiento
    print(f"\n‚ö° Test de rendimiento:")
    batch_sizes = [1, 8, 32, 64]
    
    for batch_size in batch_sizes:
        # Se√±ales de entrada complejas
        input_signals = torch.randn(batch_size, chip_config['n_modes']) + \
                       1j * torch.randn(batch_size, chip_config['n_modes'])
        input_signals = input_signals.real  # Solo parte real para simplicidad
        
        chip.eval()
        start_time = time.time()
        
        with torch.no_grad():
            outputs = chip(input_signals)
        
        elapsed = time.time() - start_time
        throughput = batch_size / elapsed
        
        print(f"   Batch {batch_size:2d}: {elapsed*1000:.2f}ms, {throughput:.1f} samples/s")
    
    return chip

def test_photonic_fft():
    """Test de FFT √≥ptica."""
    print("\nüåä Test: FFT √ìptica con Arquitectura de Reck")
    print("=" * 60)
    
    # FFT de 16 puntos
    fft_chip = PhotonicFFT(
        n_points=16,
        wavelengths=[1550e-9],  # Single wavelength para simplicidad
        temperature=300.0
    )
    
    print(f"üìä FFT Chip: {fft_chip.n_points} puntos")
    
    # Se√±ales de prueba
    test_signals = [
        torch.sin(2 * np.pi * torch.arange(16).float() * 2 / 16),  # Sinusoide
        torch.exp(-torch.arange(16).float() / 8),  # Exponencial decreciente
        torch.ones(16),  # DC
        torch.randn(16),  # Ruido
    ]
    
    signal_names = ["Sinusoide", "Exponencial", "DC", "Ruido"]
    
    print(f"\nüîç Comparaci√≥n con PyTorch FFT:")
    
    for signal, name in zip(test_signals, signal_names):
        signal_batch = signal.unsqueeze(0)  # Add batch dimension
        
        # FFT √≥ptica
        with torch.no_grad():
            optical_result = fft_chip.fft_forward(signal_batch)
        
        # Comparar con PyTorch FFT
        correlation = fft_chip.compare_with_torch_fft(signal_batch)
        
        print(f"   {name:12s}: Correlaci√≥n = {correlation:.3f}")
    
    return fft_chip

def test_matrix_multiplication():
    """Test de multiplicaci√≥n matricial √≥ptica."""
    print("\nüî¢ Test: Multiplicaci√≥n Matricial √ìptica")
    print("=" * 60)
    
    # Multiplicador 8x8
    matrix_chip = PhotonicMatrixMultiplier(
        matrix_size=8,
        wavelengths=[1530e-9, 1550e-9, 1570e-9],  # 3 wavelengths
        temperature=298.0
    )
    
    print(f"üìä Matrix Multiplier: {matrix_chip.matrix_size}x{matrix_chip.matrix_size}")
    
    # Matrices de prueba
    test_matrices = [
        torch.eye(8),  # Identidad
        torch.randn(8, 8),  # Aleatoria
        torch.triu(torch.ones(8, 8)),  # Triangular superior
    ]
    
    matrix_names = ["Identidad", "Aleatoria", "Triangular"]
    
    print(f"\nüßÆ Test de multiplicaci√≥n:")
    
    for matrix, name in zip(test_matrices, matrix_names):
        matrix_batch = matrix.unsqueeze(0)  # Add batch dimension
        
        # Procesar a trav√©s del chip
        with torch.no_grad():
            result = matrix_chip.matrix_multiply(matrix_batch, matrix_batch)
        
        # Estad√≠sticas
        input_norm = torch.norm(matrix_batch).item()
        output_norm = torch.norm(result).item()
        efficiency = output_norm / input_norm if input_norm > 0 else 0
        
        print(f"   {name:12s}: Eficiencia = {efficiency:.3f}")
    
    return matrix_chip

def benchmark_vs_traditional():
    """Benchmark vs m√©todos tradicionales."""
    print("\nüèÅ Benchmark: Reck vs M√©todos Tradicionales")
    print("=" * 60)
    
    sizes = [8, 16, 32]
    
    for size in sizes:
        print(f"\nüìè Tama√±o {size}x{size}:")
        
        # Chip de Reck
        reck_chip = ReckArchitecture(
            n_modes=size,
            wavelengths=[1550e-9],
            temperature=300.0
        )
        
        # Red neuronal tradicional equivalente
        traditional_net = nn.Linear(size, size)
        
        # Datos de prueba
        test_data = torch.randn(100, size)
        
        # Benchmark Reck
        reck_chip.eval()
        start_time = time.time()
        with torch.no_grad():
            reck_output = reck_chip(test_data)
        reck_time = time.time() - start_time
        
        # Benchmark tradicional
        traditional_net.eval()
        start_time = time.time()
        with torch.no_grad():
            traditional_output = traditional_net(test_data)
        traditional_time = time.time() - start_time
        
        # Comparar
        speedup = traditional_time / reck_time
        reck_params = sum(p.numel() for p in reck_chip.parameters())
        traditional_params = sum(p.numel() for p in traditional_net.parameters())
        
        print(f"   Reck:        {reck_time*1000:.2f}ms, {reck_params} params")
        print(f"   Tradicional: {traditional_time*1000:.2f}ms, {traditional_params} params")
        print(f"   Speedup:     {speedup:.2f}x")

def visualize_reck_architecture(chip: ReckArchitecture):
    """Visualizar la arquitectura de Reck."""
    print(f"\nüìä Generando visualizaci√≥n de arquitectura...")
    
    try:
        import matplotlib.pyplot as plt
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        # 1. Estructura de la red
        ax1.set_title('Arquitectura de Reck - Estructura de MZIs')
        
        # Dibujar la estructura triangular
        for i, (layer_idx, mode_a, mode_b) in enumerate(chip.mzi_positions[:50]):  # Limitado para visualizaci√≥n
            y_pos = chip.n_modes - mode_a - 1
            x_pos = layer_idx * 2
            
            # L√≠nea conectando los modos
            ax1.plot([x_pos, x_pos + 1], [y_pos, y_pos - 1], 'b-', alpha=0.6)
            ax1.plot(x_pos + 0.5, y_pos - 0.5, 'ro', markersize=3)
        
        ax1.set_xlabel('Layer')
        ax1.set_ylabel('Modo √ìptico')
        ax1.grid(True, alpha=0.3)
        
        # 2. Matriz de transferencia
        ax2.set_title('Matriz de Transferencia')
        transfer_matrix = chip.get_transfer_matrix()
        im2 = ax2.imshow(transfer_matrix.detach().cpu().numpy(), cmap='viridis')
        ax2.set_xlabel('Input Mode')
        ax2.set_ylabel('Output Mode')
        plt.colorbar(im2, ax=ax2)
        
        # 3. Distribuci√≥n de par√°metros
        ax3.set_title('Distribuci√≥n de Par√°metros de Fase')
        
        all_thetas = []
        all_phis = []
        
        for layer in chip.mzi_layers:
            for mzi in layer:
                all_thetas.append(mzi.theta.item())
                all_phis.append(mzi.phi.item())
        
        ax3.hist(all_thetas, bins=20, alpha=0.5, label='Œ∏ (splitting)', color='blue')
        ax3.hist(all_phis, bins=20, alpha=0.5, label='œÜ (phase)', color='red')
        ax3.set_xlabel('Valor del Par√°metro')
        ax3.set_ylabel('Frecuencia')
        ax3.legend()
        
        # 4. Informaci√≥n del chip
        ax4.axis('off')
        ax4.text(0.1, 0.9, 'Arquitectura de Reck - Informaci√≥n', fontsize=14, fontweight='bold')
        
        info = chip.get_chip_info()
        y_pos = 0.8
        for key, value in info.items():
            if isinstance(value, (int, float)):
                if isinstance(value, float):
                    text = f"{key}: {value:.4f}"
                else:
                    text = f"{key}: {value}"
            else:
                text = f"{key}: {value}"
            
            ax4.text(0.1, y_pos, text, fontsize=10)
            y_pos -= 0.08
        
        plt.tight_layout()
        
        # Guardar en examples
        import os
        output_path = "examples/reck_architecture_analysis.png"
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"‚úÖ Visualizaci√≥n guardada en: {output_path}")
        
    except ImportError:
        print("‚ö†Ô∏è  Matplotlib no disponible - saltando visualizaci√≥n")

def main():
    """Funci√≥n principal de demostraci√≥n."""
    print("üåü Arquitectura de Reck - Chip Fot√≥nico Altamente Complejo")
    print("=" * 80)
    
    try:
        # 1. Test del chip principal
        print("üéØ Creando chip de Reck de 32x32...")
        chip = test_large_reck_chip()
        
        # 2. FFT √≥ptica
        fft_chip = test_photonic_fft()
        
        # 3. Multiplicaci√≥n matricial
        matrix_chip = test_matrix_multiplication()
        
        # 4. Benchmark
        benchmark_vs_traditional()
        
        # 5. Visualizaci√≥n
        visualize_reck_architecture(chip)
        
        print(f"\nüéâ Simulaci√≥n completa de arquitectura de Reck!")
        print(f"\nüìã Resumen:")
        print(f"   ‚úÖ Chip principal: {chip.n_modes}x{chip.n_modes}, {chip.total_mzis} MZIs")
        print(f"   ‚úÖ FFT √≥ptica: {fft_chip.n_points} puntos")
        print(f"   ‚úÖ Multiplicador matricial: {matrix_chip.matrix_size}x{matrix_chip.matrix_size}")
        print(f"   ‚úÖ Error de unitariedad: {chip.calculate_unitarity_error():.6f}")
        
        print(f"\nüî¨ Caracter√≠sticas implementadas:")
        print(f"   üîß Arquitectura de Reck cl√°sica (triangular)")
        print(f"   üåà WDM con m√∫ltiples wavelengths")
        print(f"   üå°Ô∏è  Efectos t√©rmicos realistas")
        print(f"   üìè Variaciones de fabricaci√≥n")
        print(f"   ‚ö° Crosstalk entre waveguides")
        print(f"   üéØ Transformaciones unitarias universales")
        
        print(f"\nüöÄ Para ejecutar: python examples/reck_architecture_chip.py")
        
    except Exception as e:
        print(f"\n‚ùå Error durante simulaci√≥n: {e}")
        raise

if __name__ == "__main__":
    main()